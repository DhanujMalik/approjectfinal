package com.angry.bird;

import com.badlogic.gdx.*;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.*;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import com.badlogic.gdx.utils.viewport.ScreenViewport;

import java.util.*;

public class EasyLevel implements Screen {
    private final Main game;
    private final Stage stage;
    private final SpriteBatch batch;
    private final Texture backgroundSkyTexture;
    private final Texture groundTexture;

    private World world; // Box2D World
    private Box2DDebugRenderer debugRenderer; // Debug renderer for Box2D
    private Body groundBody; // Ground body
    private Queue<Bird> birds; // Queue for birds
    private Bird currentBird; // Current bird in play
    private List<Pig> pigs; // Pigs in the level
    private List<Body> structures; // Structures in the level
    private boolean isBirdLaunched = false; // Whether the bird is launched

    private Skin skin;
    private Label birdsRemainingLabel;
    private Label pigsRemainingLabel;
    private boolean isPaused = false; // Pause state

    // Constructor
    public EasyLevel(Main game, String selectedBirdType) {
        this.game = game;
        this.stage = new Stage(new ScreenViewport());
        this.batch = new SpriteBatch();
        this.backgroundSkyTexture = new Texture(Gdx.files.internal("sky.png"));
        this.groundTexture = new Texture(Gdx.files.internal("ground.png"));

        this.skin = new Skin(Gdx.files.internal("uiskin.json"));

        // Initialize Box2D world
        this.world = new World(new Vector2(0, -9.8f), true); // Gravity
        this.debugRenderer = new Box2DDebugRenderer();

        // Create ground body
        createGround();

        // Initialize birds
        this.birds = new LinkedList<>();
        initBirds(selectedBirdType);

        // Initialize pigs and structures
        this.pigs = new ArrayList<>();
        initPigs();
        initStructures();

        // Add HUD
        addHUD();

        // Add pause button
        addPauseButton();

        // Load the first bird
        loadNextBird();

        // Set the input processor
        Gdx.input.setInputProcessor(stage);
    }

    private void addHUD() {
        birdsRemainingLabel = new Label("Birds Remaining: " + birds.size(), skin);
        birdsRemainingLabel.setPosition(10, Gdx.graphics.getHeight() - 30);

        pigsRemainingLabel = new Label("Pigs Remaining: " + pigs.size(), skin);
        pigsRemainingLabel.setPosition(10, Gdx.graphics.getHeight() - 60);

        stage.addActor(birdsRemainingLabel);
        stage.addActor(pigsRemainingLabel);
    }

    private void addPauseButton() {
        TextButton pauseButton = new TextButton("Pause", skin);
        pauseButton.setSize(100, 40);
        pauseButton.setPosition(Gdx.graphics.getWidth() - 110, Gdx.graphics.getHeight() - 50);

        pauseButton.addListener(new ClickListener() {
            @Override
            public void clicked(InputEvent event, float x, float y) {
                // Switch to PauseScreen and pass the current EasyLevel instance
                game.setScreen(new PauseScreen(game, EasyLevel.this));
            }
        });

        stage.addActor(pauseButton);
    }


    private void initBirds(String selectedBirdType) {
        for (int i = 0; i < 8; i++) {
            Bird bird;
            switch (selectedBirdType) {
                case "Red":
                    bird = new RedBird(world, 100, 150);
                    break;
                case "Blue":
                    bird = new BlueBird(world, 100, 150);
                    break;
                case "Yellow":
                    bird = new YellowBird(world, 100, 150);
                    break;
                default:
                    throw new IllegalArgumentException("Unknown bird type: " + selectedBirdType);
            }
            birds.add(bird);
        }
    }

    private void createGround() {
        BodyDef groundDef = new BodyDef();
        groundDef.position.set(0, 0);
        groundBody = world.createBody(groundDef);

        PolygonShape groundShape = new PolygonShape();
        groundShape.setAsBox(Gdx.graphics.getWidth(), 10); // Ground dimensions

        FixtureDef fixtureDef = new FixtureDef();
        fixtureDef.shape = groundShape;
        fixtureDef.friction = 0.5f;
        groundBody.createFixture(fixtureDef);

        groundShape.dispose();
    }

    private void initPigs() {
        pigs.add(new SmallPig(world, 500, 100));
        pigs.add(new SmallPig(world, 550, 120));
        pigs.add(new MediumPig(world, 600, 140));
        pigs.add(new LargePig(world, 650, 160));
    }

    private void initStructures() {
        structures = new ArrayList<>();
        structures.add(createStaticBox(200, 50, 50, 100)); // Example structure
    }

    private Body createStaticBox(float x, float y, float width, float height) {
        BodyDef bodyDef = new BodyDef();
        bodyDef.position.set(x, y);
        Body body = world.createBody(bodyDef);

        PolygonShape boxShape = new PolygonShape();
        boxShape.setAsBox(width / 2, height / 2);

        FixtureDef fixtureDef = new FixtureDef();
        fixtureDef.shape = boxShape;
        fixtureDef.density = 1f;
        fixtureDef.friction = 0.5f;
        fixtureDef.restitution = 0.3f;
        body.createFixture(fixtureDef);

        boxShape.dispose();
        return body;
    }

    private void loadNextBird() {
        if (!birds.isEmpty()) {
            currentBird = birds.poll();
            updateHUD();
        } else {
            currentBird = null;
            checkGameOver();
        }
    }

    private void updateHUD() {
        birdsRemainingLabel.setText("Birds Remaining: " + birds.size());
        pigsRemainingLabel.setText("Pigs Remaining: " + pigs.size());
    }

    private void checkGameOver() {
        if (pigs.isEmpty()) {
            game.setScreen(new LevelCompleteScreen(game));
        } else if (birds.isEmpty()) {
            game.setScreen(new GameOverScreen(game));
        }
    }

    @Override
    public void render(float delta) {
        if (isPaused) return;

        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        // Update physics
        world.step(1 / 60f, 6, 2);

        batch.begin();
        batch.draw(backgroundSkyTexture, 0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
        batch.end();

        // Render game objects
        for (Pig pig : pigs) {
            pig.render(batch);
        }
        if (currentBird != null) {
            currentBird.render(batch);
        }

        debugRenderer.render(world, stage.getCamera().combined);

        stage.act(delta);
        stage.draw();
    }

    @Override
    public void resize(int width, int height) {
        stage.getViewport().update(width, height, true);
    }

    @Override
    public void pause() {
        isPaused = true;
    }

    @Override
    public void resume() {
        isPaused = false;
    }

    @Override
    public void show() {}

    @Override
    public void hide() {}

    @Override
    public void dispose() {
        batch.dispose();
        backgroundSkyTexture.dispose();
        groundTexture.dispose();
        world.dispose();
        debugRenderer.dispose();
        stage.dispose();
    }
}
